plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

group = project.maven_group
version = System.getenv("MC_QQ_VERSION") ?: project.findProperty("mod_version")

base {
    archivesName = "${archives_base_name}_${minecraft_version}"
}

repositories {
    maven {
        url = uri(maven_url)
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("PACKAGE_READ_ONLY_TOKEN")
        }
    }
}

ext {
    lombok_version = System.getenv("LOMBOK_VERSION") ?: project.findProperty("lombok_version")
    mcqq_tool_version = System.getenv("MCQQ_TOOL_VERSION") ?: project.findProperty("mcqq_tool_version")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    implementation "org.projectlombok:lombok:${lombok_version}"
    implementation "com.github.theword.mcqq:mc-qq-tool:${mcqq_tool_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": minecraft_version,
                "loader_version": loader_version
    }
}

def targetJavaVersion = Integer.parseInt(java_version)
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from {
        configurations.compileClasspath.collect {
            if (it.name.containsIgnoreCase("mc-qq-tool") || it.name.containsIgnoreCase("websocket") || it.name.containsIgnoreCase("snake")) {
                zipTree(it)
            }
        }
    }
}
